class Solution {
public:
    int solve(string s1,string s2,int i,int j,vector< vector<int> > &dp)
    {
        if(i==s1.length() || j==s2.length())
        {
            return 0;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int ans=0;
        if(s1[i]==s2[j])
        {
            ans=1+solve(s1,s2,i+1,j+1,dp);
        }
        else
        {
            ans=max(solve(s1,s2,i,j+1,dp),solve(s1,s2,i+1,j,dp));
        }
        return dp[i][j]=ans;

    }
    int solvetab(string s1,string s2)
    {
        int n=s1.length();
        int m=s2.length();
        vector< vector<int>  > dp(n+1,vector<int> (m+1,0));
        dp[n][m]=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
                 int ans=0;
                if(s1[i]==s2[j])
                {
                    ans=1+dp[i+1][j+1];
                }
                else
                {
                    ans=max(dp[i][j+1],dp[i+1][j]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
    int longestCommonSubsequence(string text1, string text2) {
        vector< vector<int>  > dp(text1.length()+1,vector<int> (text2.length()+1,-1));
        // return solve(text1,text2,0,0,dp);
        return solvetab(text1,text2);
    }
};
