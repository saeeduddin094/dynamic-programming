#include <bits/stdc++.h> 
int solvetab(vector<int> prices,int n,int k)
{
    vector<vector<int>> dp(n+1,vector<int>(2*k+1,0));
    for(int index=n-1;index>=0;index--)
    {
        for(int operation=2*k-1;operation>=0;operation--)
        {
            int profit=0;
            if(operation%2==0)
            {
                int buykaro=-prices[index]+dp[index+1][operation+1];
                int skip=0+dp[index+1][operation];
                profit=max(buykaro,skip);
            }
            else
            {
                int sellkaro=prices[index]+dp[index+1][operation+1];
                int skip=dp[index+1][operation];
                profit=max(sellkaro,skip);
            }
            dp[index][operation]=profit;
        }
    }
    return dp[0][0];
}
int solve(vector<int> &prices,int operation,int index,int n,int k,vector<vector<int>> &dp)
{
    if(index==n)
    {
        return 0;
    }
    if(operation==2*k)
    {
        return 0;
    }
    if(dp[index][operation]!=-1)
    {
        return dp[index][operation];
    }
    int profit=0;
    if(operation%2==0)
    {
        int buykaro=-prices[index]+solve(prices,operation+1,index+1,n,k,dp);
        int skip=0+solve(prices,operation,index+1,n,k,dp);
        profit=max(buykaro,skip);
    }
    else
    {
        int sellkaro=prices[index]+solve(prices,operation+1,index+1,n,k,dp);
        int skip=solve(prices,operation,index+1,n,k,dp);
        profit=max(sellkaro,skip);
    }
    return dp[index][operation]=profit;
}
int maximumProfit(vector<int> &prices, int n, int k)
{
    vector<vector<int>> dp(n+1,vector<int>(2*k,-1));
    // return solve(prices,0,0,n,k,dp);    
    return solvetab(prices,n,k);
}
