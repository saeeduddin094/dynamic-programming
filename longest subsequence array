#include <bits/stdc++.h> 
int solve(vector<int> &heights,int n,int curr,int pre,vector< vector<int> > &dp)
{
	if(curr==n)
	{
		return 0;
	}
	if(dp[curr][pre+1]!=-1)
	{
		return dp[curr][pre+1];
	}
	int take=0;
	if(pre==-1 || heights[curr]>heights[pre])
	{
		take=1+solve(heights,n,curr+1,curr,dp);
	}
	int untake=solve(heights,n,curr+1,pre,dp);
	dp[curr][pre+1] = max(take,untake);
	return dp[curr][pre+1];
}
// tabulation
	// vector<vector<int>> dp(n+1,vector<int>(n+1,0));
	// // return solve(heights,n,0,-1,dp);
	// for(int curr=n-1;curr>=0;curr--)
	// {
	// 	for(int pre=curr-1;pre>=-1;pre--)
	// 	{
	// 			int take=0;
	// 			if(pre==-1 || heights[curr]>heights[pre])
	// 			{
	// 				take=1+dp[curr+1][curr+1];
	// 			}
	// 			int untake=dp[curr+1][pre+1];
	// 			dp[curr][pre+1] = max(take,untake);			
	// 	}
	// }
	// 	return dp[0][0];
int LIS(vector<int> &heights, int n){	
    vector<int> ans;
	ans.push_back(heights[0]);
	for(int i=1;i<n;i++)
	{
		if( heights[i] > ans.back() )
		{
			ans.push_back(heights[i]);
		}
		else
		{
			int index=lower_bound(ans.begin(),ans.end(),heights[i])-ans.begin();
			ans[index]=heights[i];
		}
	}
	return ans.size();
}
